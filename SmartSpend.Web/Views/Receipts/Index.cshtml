@*
 *
 * RECEIPTS INDEX
 *
*@

@model IEnumerable<SmartSpend.Core.Models.Receipt>
@inject Common.DotNet.IClock clock;

@{
    ViewData["Title"] = "Receipts";
}

@*
    ANTI-FORGERY
*@

@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery Xsrf
@functions{
    public string GetAntiXsrfRequestToken()
    {
        return Xsrf.GetAndStoreTokens(Context).RequestToken;
    }
}

@*
    PAGE NAVBAR
*@

<nav class="navbar navbar-light navbar-page mb-2">
    <div class="container-fluid">
        <span class="navbar-brand mt-1 h1">@ViewData["Title"]</span>
        <div class="d-flex my-1">
            <div class="nav-item dropstart" data-tooltip="tooltip" data-bs-placement="bottom" title="Actions">
                <button class="btn btn-secondary dropdown-toggle dropdown-noarrow" id="dropdownMenuButtonAction" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    <i class="fas fa-ellipsis-h"></i>
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButtonAction">
                    <a href="#" data-bs-toggle="modal" data-bs-target="#helpModal" class="btn">Help Topic</a>
                </div>
            </div>
        </div>
    </div>
</nav>

@*
    RESULTS TABLE
*@

@if (Model.Any())
{
    var line = 0;

<table class="table table-index" data-test-id="results">
    <thead>
        <tr class="row">
            <th class="col-lg-2 col-3" style="text-align:right" data-test-id="Date">
                @Html.DisplayNameFor(model => model.Timestamp)<span class="d-none d-sm-inline d-lg-none">/Amount</span>
            </th>
            <th class="col-lg-5 col-6" data-test-id="Filename">
                @Html.DisplayNameFor(model => model.Filename)<span class="d-lg-none">/Name</span>/Memo
            </th>
            <th class="d-none d-lg-block col-lg-1" style="text-align:right">
                @Html.DisplayNameFor(model => model.Amount)
            </th>
            <th class="d-none d-lg-block col-lg-4">
                @Html.DisplayNameFor(model => model.Name)
            </th>
            <th class="d-none" data-test-id="Spacer"/>
            <th class="d-none" data-test-id="Memo"/>
        </tr>
    </thead>
    <tbody>
    @foreach (var item in Model) 
    {
        ++line;

        var nmatches = item.Matches.Count;
        var hasmemo = !string.IsNullOrEmpty(item.Memo);

        <tr class="row">
            <td class="col-lg-2 col-3" style="text-align:right">
                @if (item.Timestamp.Year == clock.Now.Year)
                {
                    @item.Timestamp.ToString("M/dd")                            
                }
                else
                {
                    @item.Timestamp.ToString("M/dd/yy")
                }                
            </td>
            <td class="col-lg-5 col-9">
                @Html.DisplayFor(modelItem => item.Filename)
            </td>
            <td class="col-lg-1 col-3" style="text-align:right">
                @Html.DisplayFor(modelItem => item.Amount)
            </td>
            <td class="col-lg-@(hasmemo?4:3) col-@(hasmemo?9:7)">
                @Html.DisplayFor(modelItem => item.Name)
            </td>

            @if(hasmemo)
            {
                <td class="col-lg-2 col-3"/>
                <td class="col-lg-9 col-7">
                    <span data-test-id="memo">@Html.DisplayFor(modelItem => item.Memo)</span>
                </td>
            }
            else
            {
                <td class="d-none"/>
                <td class="d-none" data-test-id="memo"/>
            }
            <td data-test-id="Matches" data-test-value="@nmatches" class="col-lg-1 col-2" style="text-align: right">
                <form method="post" asp-action="Action" id="form-@line">
                    <input type="hidden" name="id" value="@item.ID"/>
                    @if (nmatches == 1)
                    {
                        <input type="hidden" name="txid" value="@item.Matches.Single().ID" />
                    }
                </form>

                <div class="dropdown">
                    <button href="#" class="btn btn-sm btn-outline-secondary my-1 dropdown-toggle dropdown-noarrow" id="actions-@line" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        <i class="fas fa-ellipsis-h"></i>
                    </button>
                    <div class="dropdown-menu" aria-labelledby="actions-@line">
                        @if (nmatches == 1)
                        {
                            <button type="submit" form="form-@line" name="command" value="Accept" class="btn dropdown-item">
                                <i class="fa fa-check"></i> Accept
                            </button>
                        }
                        @if (nmatches > 0)
                        {
                            <button type="button" class="btn dropdown-item" data-id="@item.ID" data-bs-toggle="modal" data-bs-target="#detailsModal" data-test-id="review">
                                <i class="fa fa-eye"></i> Review
                            </button>                            
                        }
                        <a asp-controller="Transactions" asp-action="Create" asp-route-rid="@item.ID" class="btn dropdown-item">
                            <i class="fa fa-plus"></i> Create
                        </a>

                        <button type="submit" form="form-@line" class="btn dropdown-item" name="command" value="Delete">
                            <i class="fa fa-trash-alt"></i> Delete
                        </button>

                    </div>
                </div>
            </td>
        </tr>
    }
    </tbody>
</table>
}

@*
    ACCEPT ALL BUTTON
*@

@if (Model.Any(x=>x.Matches.Count == 1))
{
    <form asp-action="AcceptAll">
        <input type="submit" value="Accept All" class="btn btn-primary" data-test-id="accept-all" />
    </form>
    <hr/>
}

@*
    UPLOAD FILES CONTROL
*@

@{
    var btnclass = (Model.Any(x => x.Matches.Count == 1)) ? "btn-secondary" : "btn-primary";
}

<form method="post" enctype="multipart/form-data" asp-action="Upload">
    <div class="input-group mb-3 mt-3">
        <button class="btn @btnclass" type="submit" id="inputGroupFileAddon03" data-test-id="btn-create-receipt" disabled>Upload</button>
        <input type="file" class="form-control" id="inputGroupFile03" aria-describedby="inputGroupFileAddon03" aria-label="Upload" name="files" multiple>
    </div>
</form>

@*
    HELP TEXT
*@

@if (!Model.Any())
{
<div data-test-id="help-text">
<p>You can upload receipts here, then later match them with your transactions. If you name them according to the expected naming convention, the system can help you find the right transaction.</p>
<p>Here’s how you name them: {Payee Name} ${Amount} {MM}-{DD} {Memo}.pdf/png/jpg.</p>
<p>For example: Uptown Espresso $5.11 12-29 Afternoon pick-me up.pdf.</p>
<p>You can include as many or as few of these terms as you like. The more you include, the better the transaction matches to follow.</p>
</div>    
}

@*
    DETAILS DIALOG
*@

<div class="buttondialog modal fade" id="detailsModal" tabindex="-1" role="dialog" aria-labelledby="detailsModalLabel" aria-hidden="true" data-endpoint="/Receipts/Details">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-body">
                <div class="d-flex justify-content-center spinner-container">
                    <div class="spinner-border my-5" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" data-test-id="btn-cancel">Cancel</button>
            </div>
        </div>
    </div>
</div>

@*
    HELP DIALOG
*@

@await Html.PartialAsync("/Views/Shared/_HelpDialogPartial.cshtml", "receipt")
